# Data Containers {#sec-containers}

```{r setup, echo=FALSE, results="asis"}
library(rebook)
library(DT)
chapterPreamble()
```

This section provides an introduction to `TreeSummarizedExperiment (TreeSE)`
and `MultiAssayExperiment (MAE)` data containers introduced in
[@sec-microbiome-bioc]. In microbiome data science, these containers
link taxonomic abundance tables with rich side information on the features and
samples. Taxonomic abundance data can be obtained by 16S rRNA amplicon
or metagenomic sequencing, phylogenetic microarrays, or by other
means. Many microbiome experiments include multiple versions and types
of data generated independently or derived from each other through
transformation or agglomeration. We start by providing recommendations
on how to represent different varieties of multi-table data within the
`TreeSE` class.

The options and recommendations are summarized in [@tbl-options].

## Rows and columns {#sec-rows-and-cols}

Let us load example data and store it in variable `tse`.

```{r}
library(mia)
data("GlobalPatterns", package = "mia")
tse <- GlobalPatterns
tse
```

The `TreeSE` object, similar to a standard `data.frame` or `matrix`, has rows
and columns. Typically, samples are stored in columns, while features or taxa
are stored in rows. You can extract subsets of the data, such as the first
five rows and certain three columns. The object manages the linkages
between data, ensuring, for example, that when you subset the data, for
instance, both the assay and sample metadata are subsetted simultaneously,
ensuring they remain matched with each other.

```{r}
#| label: subset_intro

tse <- tse[1:5, c(1, 19, 16)]
tse
```

Compared to the original data the dimensions are for rows and columns 5 and 3,
respectively.

::: {.callout-note}
## Note

`SummarizedExperiment` objects have rows and columns.
Also `MultiAssayExperiment`, introduced in [@sec-mae] have rows and cols but
the structure is more complicated. You can find more examples on subsetting
from [@sec-treese_subsetting].

:::

## Assay data {#sec-assay-slot}

The microbiome is the collection of all microbes (such as bacteria, viruses,
fungi, etc.) in the body. When studying these microbes, abundance data is
needed, and thatâ€™s where assays come in.

An assay is a way of measuring the presence and abundance of different types
of microbes in a sample. For example, if you want to know how many bacteria of
a certain type are in your gut, you can use an assay to measure this. When
storing assays, the original data is count-based. However, the original
count-based taxonomic abundance tables may undergo different 
transformations, such as logarithmic, Centered Log-Ratio (CLR), or relative 
abundance. These are typically stored in _**assays**_. See
[@sec-assay-transform] for more information on transformations.

The `assays` slot contains the experimental data as multiple count matrices.
The result of `assays` is a list of matrices.

```{r}
assays(tse)
```

Individual assays can be accessed via `assay`

```{r}
assay(tse, "counts") |> head()
```

So, in summary, in the world of microbiome analysis, an assay is essentially
a way to quantify and understand the composition of microbes in a given sample,
which is super important for all kinds of research, ranging from human health
to environment studies. 

Furthermore, to illustrate the use of multiple assays, we can create an empty
matrix and add it to the object.

```{r}
mat <- matrix(nrow = nrow(tse), ncol = ncol(tse))
assay(tse, "empty_table", withDimnames=FALSE) <- mat
assays(tse)
```

Now there are two assays available in the `tse` object, `counts` and 
`empty_table`.

```{r}
assay(tse, "empty_table") |> head()
```

Here the dimension of the assay data remains unchanged. This is in fact
a requirement for the assays.

## colData

`colData` contains information about the samples used in the study. This
information can include details such as the sample ID, the primers used in
the analysis, the barcodes associated with the sample (truncated or complete),
the type of sample (e.g. soil, fecal, mock) and a description of the sample.

```{r coldata}
colData(tse)
```

To illustrate, ***X.SampleID*** gives the sample identifier, ***SampleType***
indicates the sample type (e.g. soil, fecal matter, control) and
***Description*** provides an additional description of the sample.

## rowData {#sec-rowData}

`rowData` contains data on the features of the analyzed samples. This is
particularly important in the microbiome field for storing taxonomic
information. This taxonomic information is extremely important for
understanding the composition and diversity of the microbiome in each sample
analyzed. It enables identification of the different types of microorganisms
present in samples. It also allows you to explore the relationships between
microbiome composition and various environmental or health factors.

```{r rowdata}
rowData(tse)
```

## rowTree  

Phylogenetic trees also play an important role in the microbiome field. The 
`TreeSE` class can keep track of features and node
relations via two functions, `rowTree` and `rowLinks`.

A tree can be accessed via `rowTree` as `phylo` object.      

```{r rowtree}
rowTree(tse)
```

The links to the individual features are available through `rowLinks`.

```{r rowlinks}
rowLinks(tse)
```

Please note that there can be a 1:1 relationship between tree nodes and 
features, but this is not a must-have. This means there can be features that
are not linked to nodes, and nodes that are not linked to features. To change
the links in an existing object, the `changeTree` function is available.

## Alternative Experiments {#sec-alt-exp}

_**Alternative experiments**_ complement _assays_. They can contain
complementary data, which is no longer tied to the same dimensions as
the assay data. However, the number of samples (columns) must be the
same.

This can come into play, for instance, when one has taxonomic
abundance profiles quantified using different measurement technologies,
such as phylogenetic microarrays, amplicon sequencing, or metagenomic
sequencing. Another common use case is including abundance tables for
different taxonomic ranks. Such alternative experiments concerning the
same set of samples can be stored as

1. Separate _assays_ assuming that the taxonomic information can be mapped 
between features directly 1:1; or 
2. Data in the _altExp_ slot of the `TreeSE`, if the feature 
dimensions differ. Each element of the _altExp_ slot is a `SE`
or an object from a derived class with independent feature data.

The following shows how to store taxonomic abundance tables
agglomerated at different taxonomic levels. However, the data could as
well originate from entirely different measurement sources as long as
the samples match.

Let us first subset the data so that it has only two rows.

```{r altexp_agglomerate}
tse_sub <- tse[1:2, ]
# Both have the same number of columns (samples)
dim(tse)
dim(tse_sub)
```

Then we can add the new data object as an alternative experiment in the
original data.

```{r altexp_agglomerate2}
# Add the new data object to the original data object as an alternative
# experiment with the name "Phylum"
altExp(tse, "subsetted") <- tse_sub

# Check the alternative experiment names available in the data
altExpNames(tse)
```

We can now subset the data by taking certain samples, for instance, and this
acts on both `altExp` and assay data.

```{r altexp_agglomerate3}
tse_single_sample <- tse[, 1]
dim(altExp(tse_single_sample,"subsetted"))
```

For more details on _altExp_, you can check the
[introduction](https://bioconductor.org/packages/release/bioc/vignettes/SingleCellExperiment/inst/doc/intro.html)
to the `SingleCellExperiment` package [@R_SingleCellExperiment].

## Multiple experiments {#sec-mae}

_**Multiple experiments**_ relate to complementary measurement types,
such as transcriptomic or metabolomic profiling of the microbiome or
the host. Multiple experiments can be represented using the same
options as alternative experiments, or by using the
`MAE` class [@Ramos2017]. Depending on how the 
datasets relate to each other the data can be stored as:

1.  _altExp_ if the samples can be matched directly 1:1; or
2. As `MAE` objects, in which the connections between
samples are defined through a `sampleMap`. Each element on the
`ExperimentList` of an `MAE` is `matrix` or
`matrix`-like objects, including `SE` objects, and 
the number of samples can differ between the elements.

The `MAE` object can handle more complex relationships between experiments.
It manages the linkages between samples and experiments, ensuring that
the data remains consistent and well-organized.

```{r}
#| label: show_mae

data("HintikkaXOData")
mae <- HintikkaXOData
mae
```

The `sampleMap` is a crucial component of the `MAE` object as it acts as the
important bookkeeper, maintaining the information about which samples are
associated with which experiments. This ensures that data linkages are
correctly managed and preserved across different types of experiments.

In fact, we can have 

```{r}
#| label: show_mae2

sampleMap(mae) |> head()
```

For illustration, let's subset the data by taking first five samples.

```{r}
#| label: show_mae3

mae <- mae[ , 1:5, ]
mae
```

::: {.callout-note}
## Note

If you have multiple experiments containing replicated samples from patients,
you can utilize the `MultiAssayExperiment` object to keep track of which
samples belong to which patient.

:::
<!--
```{r}
#TODO: Find the right dataset to explain a non 1:1 sample relationship
```
-->

For information have a look at the
[intro vignette](https://bioconductor.org/packages/release/bioc/vignettes/MultiAssayExperiment/inst/doc/MultiAssayExperiment.html)
of the `MultiAssayExperiment` package.  

::: {.callout-tip}
## Recommended options for storing multiple data tables in microbiome studies

   Option   Rows (features)    Cols (samples)               Recommended  
---------   --------------    ---------------  ------------------------
   assays  	         match              match       Data transformations  
   altExp             free              match    Alternative experiments  
MultiAssay            free      free (mapping)    Multi-omic experiments    

:
The _assays_ are best suited for data transformations (one-to-one match between
samples and columns across the assays). The _alternative experiments_ are
particularly suitable for alternative versions of the data that are of same
type but may have a different number of features (e.g. taxonomic groups); this
is for instance the case with taxonomic abundance tables agglomerated at
different levels (e.g. genus vs. phyla) or alternative profiling technologies
(e.g. amplicon sequencing vs. shallow shotgun metagenomics). For alternative
experiments one-to-one match between samples (cols) is libraryd but the
alternative experiment tables can have different numbers of features (rows).
Finally, elements of the _MAE_ provide the most flexible way to incorporate
multi-omic data tables with flexible numbers of samples and features. We
recommend these conventions as the basis for methods development and application
in microbiome studies. {#tbl-options}

Multi-assay analyses, discussed in sections [@sec-cross-correlation] and
[@sec-multiassay_ordination], can be facilitated by the multi-assay data
containers,
_TreeSummarizedExperiment_ and _MultiAssayExperiment_. These are
scalable and contain different types of data in a single container,
making this framework particularly suited for multi-assay microbiome
data incorporating different types of complementary data sources in a
single, reproducible workflow. An alternative experiment can be stored in
_altExp_ slot of the SE data container. Alternatively, both experiments can be
stored side-by-side in an `MAE` data container.

:::
